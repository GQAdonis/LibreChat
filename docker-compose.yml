# Do not edit this file directly. Use a 'docker-compose.override.yaml' file if you can.
# Refer to `docker-compose.override.yaml.example' for some sample configurations.
services:
  api:
    container_name: LibreChat
    ports:
      - "${PORT:-3080}:${PORT:-3080}"
    depends_on:
      - mongodb
      - meilisearch
      - rag_api
    image: tribehealth/librechat:05132025
    restart: always
    # Run as root to avoid permission issues
    # user: "1000:1000"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - HOST=0.0.0.0
      - MONGO_URI=mongodb://mongodb:27017/LibreChat
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKey}
      - RAG_PORT=${RAG_PORT:-8000}
      - RAG_API_URL=http://rag_api:${RAG_PORT:-8000}
      - EMAIL_VERIFICATION=false
      - ALLOW_UNVERIFIED_EMAIL_LOGIN=true
      - ALLOW_PASSWORD_RESET=false
      - ALLOW_REGISTRATION_WITHOUT_EMAIL=false
    volumes:
      # Comment out the .env binding to ensure container environment variables take precedence
      - type: bind
        source: ./.env
        target: /app/.env
      - ./images:/app/client/public/images:rw
      - ./uploads:/app/uploads:rw
      - ./logs:/app/api/logs:rw
      - ./librechat.yaml:/app/librechat.yaml:ro
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      # HTTP router
      - "traefik.http.routers.librechat.rule=Host(`chat.prometheusags.ai`)"
      - "traefik.http.routers.librechat.entrypoints=websecure"
      - "traefik.http.routers.librechat.tls.certresolver=myresolver"
      - "traefik.http.routers.librechat.service=librechat"
      
      # HTTP to HTTPS redirect
      - "traefik.http.routers.librechat-http.rule=Host(`chat.prometheusags.ai`)"
      - "traefik.http.routers.librechat-http.entrypoints=web"
      - "traefik.http.routers.librechat-http.middlewares=redirect-to-https@docker"
      - "traefik.http.routers.librechat-http.service=librechat"
      
      # Service definition
      - "traefik.http.services.librechat.loadbalancer.server.port=${PORT:-3080}"
      - "traefik.http.services.librechat.loadbalancer.passhostheader=true"
      
      # Timeout configuration for Traefik v3
      - "traefik.http.middlewares.librechat-timeout.headers.customResponseHeaders.X-Timeout=600"
      - "traefik.http.routers.librechat.middlewares=librechat-headers@docker,librechat-timeout@docker"
      
      # Header middleware for proper proxy forwarding
      - "traefik.http.middlewares.librechat-headers.headers.customRequestHeaders.X-Forwarded-Host=chat.prometheusags.ai"
      - "traefik.http.middlewares.librechat-headers.headers.customRequestHeaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.librechat-headers.headers.customRequestHeaders.X-Forwarded-For=chat.prometheusags.ai"
      
      # Timeout middleware configuration for Traefik v3
      - "traefik.http.middlewares.long-timeout.headers.customResponseHeaders.X-Timeout-Config=enabled"
      
      # Apply the headers middleware to the main router
      # This is now handled in the combined middleware chain above
      
      # WebSocket configuration
      - "traefik.http.routers.librechat-ws.rule=Host(`chat.prometheusags.ai`) && PathPrefix(`/ws`)"
      - "traefik.http.routers.librechat-ws.entrypoints=websecure"
      - "traefik.http.routers.librechat-ws.tls.certresolver=myresolver"
      - "traefik.http.routers.librechat-ws.service=librechat"
      
      # WebSocket headers middleware
      - "traefik.http.middlewares.websocket-headers.headers.customRequestHeaders.Connection=Upgrade"
      - "traefik.http.middlewares.websocket-headers.headers.customRequestHeaders.Upgrade=websocket"
      
      # Create a middleware chain for WebSocket
      - "traefik.http.middlewares.ws-chain.chain.middlewares=websocket-headers@docker,librechat-headers@docker"
      
      # Apply the middleware chain to the WebSocket router
      - "traefik.http.routers.librechat-ws.middlewares=ws-chain@docker"
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  mongodb:
    container_name: chat-mongodb
    image: mongo
    restart: always
    # Run as root to avoid permission issues
    # user: "1000:1000" 
    command: ["mongod", "--noauth", "--wiredTigerCacheSizeGB", "1"]
    volumes:
      - ./data-node:/data/db:rw
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik_network

  meilisearch:
    container_name: chat-meilisearch
    image: getmeili/meilisearch:v1.12.3
    restart: always
    # Run as root to avoid permission issues
    # user: "1000:1000"
    environment:
      - MEILI_HOST=http://meilisearch:7700
      - MEILI_NO_ANALYTICS=true
      - MEILI_MASTER_KEY=${MEILI_MASTER_KEY:-masterKey}
      - MEILI_ENV=production
    volumes:
      - ./meili_data_v1.12:/meili_data:rw
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--spider", "http://localhost:7700/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - traefik_network

  vectordb:
    container_name: vectordb
    image: ankane/pgvector:latest
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    restart: always
    volumes:
      - pgdata2:/var/lib/postgresql/data
    networks:
      - traefik_network

  rag_api:
    container_name: rag_api
    image: ghcr.io/danny-avila/librechat-rag-api-dev-lite:latest
    environment:
      - DB_HOST=vectordb
      - RAG_PORT=${RAG_PORT:-8000}
    restart: always
    depends_on:
      - vectordb
    env_file:
      - .env
    networks:
      - traefik_network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  pgdata2:

networks:
  traefik_network:
    external: true
